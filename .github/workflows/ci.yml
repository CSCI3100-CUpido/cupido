name: CI Pipeline

on:
  push:
    branches: [ main, 'feature/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # -------------------------------------------------------------------
  # Job 1: Commit Message Linting
  # -------------------------------------------------------------------
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint Commit Messages
        uses: wagoid/commitlint-github-action@v4
        # This action automatically reads your commitlint.config.js file
        # at the root of your repository.

  # -------------------------------------------------------------------
  # Job 2: Build and Test (Partially Written Code)
  # These steps are commented out so they won't fail while your API is incomplete.
  # -------------------------------------------------------------------
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: datingapp
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '7.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Uncomment these steps when your API and tests are complete.
      # - name: Restore .NET Dependencies
      #   run: dotnet restore ./API
      #
      # - name: Build .NET Project
      #   run: dotnet build --configuration Release ./API
      #
      # - name: Run .NET Tests
      #   run: dotnet test --no-build --configuration Release ./YourTestProject
      #
      # - name: Install Frontend Dependencies
      #   run: npm ci --prefix ./frontend
      #
      # - name: Lint and Test Frontend
      #   run: |
      #     npm run lint --prefix ./frontend
      #     npm run test --prefix ./frontend -- --watch=false
      #
      # - name: Build Docker Images via Docker Compose
      #   run: docker-compose -f docker-compose.yml build

  # -------------------------------------------------------------------
  # Job 3: Docker Build and Push (Runs Only on main)
  # -------------------------------------------------------------------
  # docker:
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   env:
  #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and Push Docker Image
  #       uses: docker/build-push-action@v3
  #       with:
  #         # Adjust the context if necessary; here we use the repository root.
  #         context: .
  #         push: true
  #         tags: chrisshim98/datingapp:latest

  # -------------------------------------------------------------------
  # Job 4: Deploy to Fly.io (Runs Only on main, after Docker Push)
  # -------------------------------------------------------------------
  # deploy:
  #   if: github.ref == 'refs/heads/main'
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Flyctl
  #       uses: superfly/flyctl-actions/setup-flyctl@master

  #     - name: Deploy to Fly.io
  #       run: flyctl deploy --remote-only
